class Solution:
    def countGoodNumbers(self, n: int) -> int:
        mod = 10**9 + 7
        
        def modular_exponentiation(base, exponent, modulus):
            result = 1
            while exponent > 0:
                if exponent % 2 == 1:
                    result = (result * base) % modulus
                base = (base * base) % modulus
                exponent //= 2
            return result
        
        count_even = (n + 1) // 2
        count_odd = n - count_even
        
        total_good_numbers = (modular_exponentiation(5, count_even, mod) * modular_exponentiation(4, count_odd, mod)) % mod
        return total_good_numbers
